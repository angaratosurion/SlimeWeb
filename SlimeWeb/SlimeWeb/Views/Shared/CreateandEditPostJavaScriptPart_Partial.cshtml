@*<style>

    #scrolling-container, #editor ,#content {
        min-width: 500px;
        height: 500px;
      
      /*min-height: auto;*/
        overflow-y: auto;
        overflow-x:auto;
    }
</style>*@
@{
    @using SlimeWeb.Core.Managers.Markups;
    var cmsengine = SlimeWeb.Core.Managers.AppSettingsManager.GetAppWideCMSEngine();



    if (cmsengine == null)
    {
        <script src="~/lib/tinymce/tinymce.min.js" referrerpolicy="origin"></script>

        <script>
    tinymce.init({
        selector: '#content',
        plugins: 'bbcode code a11ychecker advcode casechange formatpainter linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable tinycomments tinymcespellchecker image imagetools',
        toolbar: 'a11ycheck addcomment showcomments casechange checklist code formatpainter pageembed permanentpen table link|image'
        , images_upload_url: '@ViewBag.pathbase/Posts/Upload/@(Context.Request.RouteValues["id"])',
        automatic_uploads: true,
        images_reuse_filename: true,
        //images_upload_base_path: '~/AppData/AppData/Temp/'
    })
        </script>

    }


    else
    {



        if (cmsengine == enumMarkupEngine.BBCODE.ToString())
        {

            <script src="~/lib/tinymce/tinymce.min.js" referrerpolicy="origin"></script>


            if (ViewBag.CreateAction == true)
            {
                <script>

                tinymce.init({ selector: '#content',
        plugins: 'bbcode code a11ychecker advcode casechange formatpainter linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable tinycomments tinymcespellchecker image imagetools',
        toolbar: 'a11ycheck addcomment showcomments casechange checklist code formatpainter pageembed permanentpen table link|image'
            , images_upload_url: '@ViewBag.pathbase/Posts/Upload/@(Context.Request.RouteValues["id"])',
        automatic_uploads: true,
        images_reuse_filename: true,
        //images_upload_base_path: '~/AppData/AppData/Temp/'
                })

                </script>
            }
            else
            {

                <script>

                tinymce.init({ selector: '#content',
        plugins: 'bbcode code a11ychecker advcode casechange formatpainter linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable tinycomments tinymcespellchecker image imagetools',
        toolbar: 'a11ycheck addcomment showcomments casechange checklist code formatpainter pageembed permanentpen table link|image'
                    , images_upload_url: '@ViewBag.pathbase/Posts/UploadEdit/@(Context.Request.RouteValues["id"])',
        automatic_uploads: true,
        images_reuse_filename: true,
        //images_upload_base_path: '~/AppData/AppData/Temp/'
                })

                </script>


            }


        }
        else if (cmsengine == enumMarkupEngine.MARKDOWN.ToString())
        {

            <script src="~/lib/tinymce/tinymce.min.js" referrerpolicy="origin"></script>
            if (ViewBag.CreateAction == true)
            {
                <script>
    tinymce.init({
        selector: '#content',
        plugins: ' code a11ychecker advcode casechange formatpainter linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable tinycomments tinymcespellchecker image imagetools',
        toolbar: 'a11ycheck addcomment showcomments casechange checklist code formatpainter pageembed permanentpen table link|image'
        , images_upload_url: '@ViewBag.pathbase/Posts/Upload/@(Context.Request.RouteValues["id"])',
        automatic_uploads: true,
        images_reuse_filename: true,
        //images_upload_base_path: '~/AppData/AppData/Temp/'
    })
                </script>
            }
            else
            {
                <script>
    tinymce.init({
        selector: '#content',
        plugins: ' code a11ychecker advcode casechange formatpainter linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable tinycomments tinymcespellchecker image imagetools',
        toolbar: 'a11ycheck addcomment showcomments casechange checklist code formatpainter pageembed permanentpen table link|image'
        , images_upload_url: '@ViewBag.pathbase/Posts/UploadEdit/@(Context.Request.RouteValues["id"])',
        automatic_uploads: true,
        images_reuse_filename: true,
        //images_upload_base_path: '~/AppData/AppData/Temp/'
    })
                </script>
            }
        }
        else if (cmsengine == enumMarkupEngine.QUIL.ToString())
        {
            <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
            <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
           <script src="~/lib/quill-image-resize-module/image-resize.min.js"></script>
            @*<script src="~/lib/quill-image-upload/image-upload.min.js"></script>*@
 
            <script>
                //import { ImageResize } from '~/lib/quill-image-resize-module/image-resize.min.js';
                //import Quill from 'quill';

                //Quill.register('modules/imageResize', ImageResize);

                var toolbarOptions = [
                    ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
                    ['blockquote', 'code-block'],

                    //  [{ 'header': 1 }, { 'header': 2 }],               // custom button values
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                    [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
                    [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
                    [{ 'direction': 'rtl' }],                         // text direction

                    [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

                    [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
                    [{ 'font': [] }],
                    [{ 'align': [] }],
                    ['image'],
                    ['link'],
                    ['clean']                                         // remove formatting button
                ];

                var container = document.getElementById('editor');
    var options = {
        debug: 'info',
                    theme: 'snow',
                     scrollingContainer: '#scrolling-container',
        modules: {
            toolbar: toolbarOptions
            ,
            imageResize: {
                displaySize: true
            }
             

        }
    };
                var editor = new Quill(container, options);

                editor.on('text-change', function (delta, oldDelta, source) {
                    //if (source == 'api') {
                    //    console.log("An API call triggered this change.");
                    //} else if (source == 'user') {
                    //    console.log("A user action triggered this change.");
                    //}
                    //var content = document.querySelector('input[name=content');
                    var content = document.querySelector('textarea[name=content');
                    // content.value = editor.getContents();
                    var deltaobject = editor.getContents();
                    var json = JSON.stringify(deltaobject);
                    content.value = json;
                });

               editor.getModule("toolbar").addHandler("image", this.uploadImageHandler);

        function uploadImageHandler()
                {
                   // alert('test')

                    var input = document.querySelector('#uploadImg')
                    input.value = ''
                    input.click()
                    input.onchange = uploadImage;



                }
                async function uploadImage(event) {
                    //  alert('test2')
                    var form = new FormData();


                    form.append('upload_file', event.target.files[0]);

                    // alert();
                    await $.ajax({
                        url: '@ViewBag.pathbase/Posts/UploadQuill/@(Context.Request.RouteValues["id"])',
                        type: "POST",
                      contentType: false, // Not to set any content header
                        processData: false, // Not to process data
                       // enctype: 'multipart/form-data',
                        data: form,//event.target.files[0],
                        cache: false,
                   // contentType: 'multipart/form-data'   ,
                        processData: false,
                        success: function (result) {
                           /* alert(result);*/
                          //  var imgurl = JSON.parse(result);

                            var addImageRange = editor.getSelection();
                            var newRange = 0 + (addImageRange !== null ? addImageRange.index : 0);
                            console.log(addImageRange.index);
                            console.log(newRange);

                            editor.insertEmbed(newRange, 'image', result, Quill.sources.API);

                            this.editor.setSelection(1 + newRange)
                        },
                        error: function (err) {
                            alert(err.statusText);
                        },
                         headers: {
                         //    "Content-Type": "multipart/form-data"
                        }

                    });


                }

    if ( @ViewBag.CreateAction == false)
    {
        window.addEventListener('load', function () {
                var content = document.querySelector('textarea[name=content');
            //alert(@ViewBag.CreateAction);
           // editor.setText(content.value)

            editor.setContents(JSON.parse(content.value));

             });





    }






                //var elementothide = document.getElementById('content');

               // $.("#content").hide();


            </script>
            @*<input id="uploadImg" type="file" style="display:none" accept="image/png, image/jpeg, image/gif" onchange="uploadImage" />*@
            <input id="uploadImg" type="file" accept="image/png, image/jpeg, image/gif" onchange="uploadImage"  
            hidden="hidden"/>



        }
    }
}




